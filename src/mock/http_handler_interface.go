// Code generated by MockGen. DO NOT EDIT.
// Source: src/adapters/controllers/http/http_handler_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockIUserHandler is a mock of IUserHandler interface.
type MockIUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIUserHandlerMockRecorder
}

// MockIUserHandlerMockRecorder is the mock recorder for MockIUserHandler.
type MockIUserHandlerMockRecorder struct {
	mock *MockIUserHandler
}

// NewMockIUserHandler creates a new mock instance.
func NewMockIUserHandler(ctrl *gomock.Controller) *MockIUserHandler {
	mock := &MockIUserHandler{ctrl: ctrl}
	mock.recorder = &MockIUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserHandler) EXPECT() *MockIUserHandlerMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockIUserHandler) CreateNewUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockIUserHandlerMockRecorder) CreateNewUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockIUserHandler)(nil).CreateNewUser), c)
}

// GetUser mocks base method.
func (m *MockIUserHandler) GetUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserHandlerMockRecorder) GetUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserHandler)(nil).GetUser), c)
}

// GetUserList mocks base method.
func (m *MockIUserHandler) GetUserList(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockIUserHandlerMockRecorder) GetUserList(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockIUserHandler)(nil).GetUserList), c)
}

// MockIGradeHandler is a mock of IGradeHandler interface.
type MockIGradeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIGradeHandlerMockRecorder
}

// MockIGradeHandlerMockRecorder is the mock recorder for MockIGradeHandler.
type MockIGradeHandlerMockRecorder struct {
	mock *MockIGradeHandler
}

// NewMockIGradeHandler creates a new mock instance.
func NewMockIGradeHandler(ctrl *gomock.Controller) *MockIGradeHandler {
	mock := &MockIGradeHandler{ctrl: ctrl}
	mock.recorder = &MockIGradeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGradeHandler) EXPECT() *MockIGradeHandlerMockRecorder {
	return m.recorder
}

// GetGradeList mocks base method.
func (m *MockIGradeHandler) GetGradeList(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradeList", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGradeList indicates an expected call of GetGradeList.
func (mr *MockIGradeHandlerMockRecorder) GetGradeList(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradeList", reflect.TypeOf((*MockIGradeHandler)(nil).GetGradeList), c)
}

// MockIDealHistoryHandler is a mock of IDealHistoryHandler interface.
type MockIDealHistoryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIDealHistoryHandlerMockRecorder
}

// MockIDealHistoryHandlerMockRecorder is the mock recorder for MockIDealHistoryHandler.
type MockIDealHistoryHandlerMockRecorder struct {
	mock *MockIDealHistoryHandler
}

// NewMockIDealHistoryHandler creates a new mock instance.
func NewMockIDealHistoryHandler(ctrl *gomock.Controller) *MockIDealHistoryHandler {
	mock := &MockIDealHistoryHandler{ctrl: ctrl}
	mock.recorder = &MockIDealHistoryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDealHistoryHandler) EXPECT() *MockIDealHistoryHandlerMockRecorder {
	return m.recorder
}

// GetDealHistoryList mocks base method.
func (m *MockIDealHistoryHandler) GetDealHistoryList(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDealHistoryList", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDealHistoryList indicates an expected call of GetDealHistoryList.
func (mr *MockIDealHistoryHandlerMockRecorder) GetDealHistoryList(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDealHistoryList", reflect.TypeOf((*MockIDealHistoryHandler)(nil).GetDealHistoryList), c)
}

// MockIBalanceControlHandler is a mock of IBalanceControlHandler interface.
type MockIBalanceControlHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIBalanceControlHandlerMockRecorder
}

// MockIBalanceControlHandlerMockRecorder is the mock recorder for MockIBalanceControlHandler.
type MockIBalanceControlHandlerMockRecorder struct {
	mock *MockIBalanceControlHandler
}

// NewMockIBalanceControlHandler creates a new mock instance.
func NewMockIBalanceControlHandler(ctrl *gomock.Controller) *MockIBalanceControlHandler {
	mock := &MockIBalanceControlHandler{ctrl: ctrl}
	mock.recorder = &MockIBalanceControlHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBalanceControlHandler) EXPECT() *MockIBalanceControlHandlerMockRecorder {
	return m.recorder
}

// GetRemainingBalance mocks base method.
func (m *MockIBalanceControlHandler) GetRemainingBalance(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemainingBalance", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRemainingBalance indicates an expected call of GetRemainingBalance.
func (mr *MockIBalanceControlHandlerMockRecorder) GetRemainingBalance(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemainingBalance", reflect.TypeOf((*MockIBalanceControlHandler)(nil).GetRemainingBalance), c)
}

// Pay mocks base method.
func (m *MockIBalanceControlHandler) Pay(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pay indicates an expected call of Pay.
func (mr *MockIBalanceControlHandlerMockRecorder) Pay(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockIBalanceControlHandler)(nil).Pay), c)
}

// TopUp mocks base method.
func (m *MockIBalanceControlHandler) TopUp(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUp", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopUp indicates an expected call of TopUp.
func (mr *MockIBalanceControlHandlerMockRecorder) TopUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockIBalanceControlHandler)(nil).TopUp), c)
}
