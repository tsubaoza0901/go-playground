// Code generated by MockGen. DO NOT EDIT.
// Source: usecase_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	input "go-playground/m/v1/usecase/data/input"
	output "go-playground/m/v1/usecase/data/output"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBalanceControlUsecase is a mock of IBalanceControlUsecase interface.
type MockIBalanceControlUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIBalanceControlUsecaseMockRecorder
}

// MockIBalanceControlUsecaseMockRecorder is the mock recorder for MockIBalanceControlUsecase.
type MockIBalanceControlUsecaseMockRecorder struct {
	mock *MockIBalanceControlUsecase
}

// NewMockIBalanceControlUsecase creates a new mock instance.
func NewMockIBalanceControlUsecase(ctrl *gomock.Controller) *MockIBalanceControlUsecase {
	mock := &MockIBalanceControlUsecase{ctrl: ctrl}
	mock.recorder = &MockIBalanceControlUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBalanceControlUsecase) EXPECT() *MockIBalanceControlUsecaseMockRecorder {
	return m.recorder
}

// PayMoney mocks base method.
func (m *MockIBalanceControlUsecase) PayMoney(ctx context.Context, userID uint, payment input.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayMoney", ctx, userID, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayMoney indicates an expected call of PayMoney.
func (mr *MockIBalanceControlUsecaseMockRecorder) PayMoney(ctx, userID, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayMoney", reflect.TypeOf((*MockIBalanceControlUsecase)(nil).PayMoney), ctx, userID, payment)
}

// PutMoney mocks base method.
func (m *MockIBalanceControlUsecase) PutMoney(ctx context.Context, userID uint, topUpAmount input.PuttingMoney) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMoney", ctx, userID, topUpAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMoney indicates an expected call of PutMoney.
func (mr *MockIBalanceControlUsecaseMockRecorder) PutMoney(ctx, userID, topUpAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMoney", reflect.TypeOf((*MockIBalanceControlUsecase)(nil).PutMoney), ctx, userID, topUpAmount)
}

// RetrieveRemainingBalanceByUserID mocks base method.
func (m *MockIBalanceControlUsecase) RetrieveRemainingBalanceByUserID(ctx context.Context, userID uint) (output.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveRemainingBalanceByUserID", ctx, userID)
	ret0, _ := ret[0].(output.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveRemainingBalanceByUserID indicates an expected call of RetrieveRemainingBalanceByUserID.
func (mr *MockIBalanceControlUsecaseMockRecorder) RetrieveRemainingBalanceByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveRemainingBalanceByUserID", reflect.TypeOf((*MockIBalanceControlUsecase)(nil).RetrieveRemainingBalanceByUserID), ctx, userID)
}

// MockIDealUsecase is a mock of IDealUsecase interface.
type MockIDealUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIDealUsecaseMockRecorder
}

// MockIDealUsecaseMockRecorder is the mock recorder for MockIDealUsecase.
type MockIDealUsecaseMockRecorder struct {
	mock *MockIDealUsecase
}

// NewMockIDealUsecase creates a new mock instance.
func NewMockIDealUsecase(ctrl *gomock.Controller) *MockIDealUsecase {
	mock := &MockIDealUsecase{ctrl: ctrl}
	mock.recorder = &MockIDealUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDealUsecase) EXPECT() *MockIDealUsecaseMockRecorder {
	return m.recorder
}

// RetrieveDealHistoriesByUserID mocks base method.
func (m *MockIDealUsecase) RetrieveDealHistoriesByUserID(ctx context.Context, userID uint) (output.DealHistories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDealHistoriesByUserID", ctx, userID)
	ret0, _ := ret[0].(output.DealHistories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDealHistoriesByUserID indicates an expected call of RetrieveDealHistoriesByUserID.
func (mr *MockIDealUsecaseMockRecorder) RetrieveDealHistoriesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDealHistoriesByUserID", reflect.TypeOf((*MockIDealUsecase)(nil).RetrieveDealHistoriesByUserID), ctx, userID)
}

// MockIGradeUsecase is a mock of IGradeUsecase interface.
type MockIGradeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIGradeUsecaseMockRecorder
}

// MockIGradeUsecaseMockRecorder is the mock recorder for MockIGradeUsecase.
type MockIGradeUsecaseMockRecorder struct {
	mock *MockIGradeUsecase
}

// NewMockIGradeUsecase creates a new mock instance.
func NewMockIGradeUsecase(ctrl *gomock.Controller) *MockIGradeUsecase {
	mock := &MockIGradeUsecase{ctrl: ctrl}
	mock.recorder = &MockIGradeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGradeUsecase) EXPECT() *MockIGradeUsecaseMockRecorder {
	return m.recorder
}

// RetrieveGrades mocks base method.
func (m *MockIGradeUsecase) RetrieveGrades(ctx context.Context) (*output.Grades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveGrades", ctx)
	ret0, _ := ret[0].(*output.Grades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveGrades indicates an expected call of RetrieveGrades.
func (mr *MockIGradeUsecaseMockRecorder) RetrieveGrades(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveGrades", reflect.TypeOf((*MockIGradeUsecase)(nil).RetrieveGrades), ctx)
}

// MockIUserManagementUsecase is a mock of IUserManagementUsecase interface.
type MockIUserManagementUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserManagementUsecaseMockRecorder
}

// MockIUserManagementUsecaseMockRecorder is the mock recorder for MockIUserManagementUsecase.
type MockIUserManagementUsecaseMockRecorder struct {
	mock *MockIUserManagementUsecase
}

// NewMockIUserManagementUsecase creates a new mock instance.
func NewMockIUserManagementUsecase(ctrl *gomock.Controller) *MockIUserManagementUsecase {
	mock := &MockIUserManagementUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserManagementUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserManagementUsecase) EXPECT() *MockIUserManagementUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserManagementUsecase) CreateUser(ctx context.Context, input input.UserCreate, topUpAmount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input, topUpAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserManagementUsecaseMockRecorder) CreateUser(ctx, input, topUpAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserManagementUsecase)(nil).CreateUser), ctx, input, topUpAmount)
}

// RetrieveUserByCondition mocks base method.
func (m *MockIUserManagementUsecase) RetrieveUserByCondition(ctx context.Context, id uint) (output.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUserByCondition", ctx, id)
	ret0, _ := ret[0].(output.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserByCondition indicates an expected call of RetrieveUserByCondition.
func (mr *MockIUserManagementUsecaseMockRecorder) RetrieveUserByCondition(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserByCondition", reflect.TypeOf((*MockIUserManagementUsecase)(nil).RetrieveUserByCondition), ctx, id)
}

// RetrieveUsers mocks base method.
func (m *MockIUserManagementUsecase) RetrieveUsers(ctx context.Context) (output.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUsers", ctx)
	ret0, _ := ret[0].(output.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUsers indicates an expected call of RetrieveUsers.
func (mr *MockIUserManagementUsecaseMockRecorder) RetrieveUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUsers", reflect.TypeOf((*MockIUserManagementUsecase)(nil).RetrieveUsers), ctx)
}
