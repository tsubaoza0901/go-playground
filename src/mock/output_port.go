// Code generated by MockGen. DO NOT EDIT.
// Source: output_port.go

// Package mock is a generated GoMock package.
package mock

import (
	output "go-playground/m/v1/usecase/data/output"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGradeOutput is a mock of GradeOutput interface.
type MockGradeOutput struct {
	ctrl     *gomock.Controller
	recorder *MockGradeOutputMockRecorder
}

// MockGradeOutputMockRecorder is the mock recorder for MockGradeOutput.
type MockGradeOutputMockRecorder struct {
	mock *MockGradeOutput
}

// NewMockGradeOutput creates a new mock instance.
func NewMockGradeOutput(ctrl *gomock.Controller) *MockGradeOutput {
	mock := &MockGradeOutput{ctrl: ctrl}
	mock.recorder = &MockGradeOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGradeOutput) EXPECT() *MockGradeOutputMockRecorder {
	return m.recorder
}

// AppError mocks base method.
func (m *MockGradeOutput) AppError(errorCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppError", errorCode)
}

// AppError indicates an expected call of AppError.
func (mr *MockGradeOutputMockRecorder) AppError(errorCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppError", reflect.TypeOf((*MockGradeOutput)(nil).AppError), errorCode)
}

// GradeList mocks base method.
func (m *MockGradeOutput) GradeList(arg0 []*output.Grade) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GradeList", arg0)
}

// GradeList indicates an expected call of GradeList.
func (mr *MockGradeOutputMockRecorder) GradeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GradeList", reflect.TypeOf((*MockGradeOutput)(nil).GradeList), arg0)
}

// MockDealHistoryOutput is a mock of DealHistoryOutput interface.
type MockDealHistoryOutput struct {
	ctrl     *gomock.Controller
	recorder *MockDealHistoryOutputMockRecorder
}

// MockDealHistoryOutputMockRecorder is the mock recorder for MockDealHistoryOutput.
type MockDealHistoryOutputMockRecorder struct {
	mock *MockDealHistoryOutput
}

// NewMockDealHistoryOutput creates a new mock instance.
func NewMockDealHistoryOutput(ctrl *gomock.Controller) *MockDealHistoryOutput {
	mock := &MockDealHistoryOutput{ctrl: ctrl}
	mock.recorder = &MockDealHistoryOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDealHistoryOutput) EXPECT() *MockDealHistoryOutputMockRecorder {
	return m.recorder
}

// AppError mocks base method.
func (m *MockDealHistoryOutput) AppError(errorCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppError", errorCode)
}

// AppError indicates an expected call of AppError.
func (mr *MockDealHistoryOutputMockRecorder) AppError(errorCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppError", reflect.TypeOf((*MockDealHistoryOutput)(nil).AppError), errorCode)
}

// DealHistoryList mocks base method.
func (m *MockDealHistoryOutput) DealHistoryList(arg0 []*output.DealHistory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DealHistoryList", arg0)
}

// DealHistoryList indicates an expected call of DealHistoryList.
func (mr *MockDealHistoryOutputMockRecorder) DealHistoryList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealHistoryList", reflect.TypeOf((*MockDealHistoryOutput)(nil).DealHistoryList), arg0)
}

// MockUserOutput is a mock of UserOutput interface.
type MockUserOutput struct {
	ctrl     *gomock.Controller
	recorder *MockUserOutputMockRecorder
}

// MockUserOutputMockRecorder is the mock recorder for MockUserOutput.
type MockUserOutputMockRecorder struct {
	mock *MockUserOutput
}

// NewMockUserOutput creates a new mock instance.
func NewMockUserOutput(ctrl *gomock.Controller) *MockUserOutput {
	mock := &MockUserOutput{ctrl: ctrl}
	mock.recorder = &MockUserOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOutput) EXPECT() *MockUserOutputMockRecorder {
	return m.recorder
}

// AppError mocks base method.
func (m *MockUserOutput) AppError(errorCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppError", errorCode)
}

// AppError indicates an expected call of AppError.
func (mr *MockUserOutputMockRecorder) AppError(errorCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppError", reflect.TypeOf((*MockUserOutput)(nil).AppError), errorCode)
}

// User mocks base method.
func (m *MockUserOutput) User(arg0 *output.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "User", arg0)
}

// User indicates an expected call of User.
func (mr *MockUserOutputMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserOutput)(nil).User), arg0)
}

// UserList mocks base method.
func (m *MockUserOutput) UserList(arg0 []*output.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserList", arg0)
}

// UserList indicates an expected call of UserList.
func (mr *MockUserOutputMockRecorder) UserList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockUserOutput)(nil).UserList), arg0)
}

// MockBalanceOutput is a mock of BalanceOutput interface.
type MockBalanceOutput struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceOutputMockRecorder
}

// MockBalanceOutputMockRecorder is the mock recorder for MockBalanceOutput.
type MockBalanceOutputMockRecorder struct {
	mock *MockBalanceOutput
}

// NewMockBalanceOutput creates a new mock instance.
func NewMockBalanceOutput(ctrl *gomock.Controller) *MockBalanceOutput {
	mock := &MockBalanceOutput{ctrl: ctrl}
	mock.recorder = &MockBalanceOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceOutput) EXPECT() *MockBalanceOutputMockRecorder {
	return m.recorder
}

// AppError mocks base method.
func (m *MockBalanceOutput) AppError(errorCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppError", errorCode)
}

// AppError indicates an expected call of AppError.
func (mr *MockBalanceOutputMockRecorder) AppError(errorCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppError", reflect.TypeOf((*MockBalanceOutput)(nil).AppError), errorCode)
}

// Balance mocks base method.
func (m *MockBalanceOutput) Balance(arg0 *output.Balance) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Balance", arg0)
}

// Balance indicates an expected call of Balance.
func (mr *MockBalanceOutputMockRecorder) Balance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockBalanceOutput)(nil).Balance), arg0)
}
