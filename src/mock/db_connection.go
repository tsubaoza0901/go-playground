// Code generated by MockGen. DO NOT EDIT.
// Source: db_connection.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIManageDBConn is a mock of IManageDBConn interface.
type MockIManageDBConn struct {
	ctrl     *gomock.Controller
	recorder *MockIManageDBConnMockRecorder
}

// MockIManageDBConnMockRecorder is the mock recorder for MockIManageDBConn.
type MockIManageDBConnMockRecorder struct {
	mock *MockIManageDBConn
}

// NewMockIManageDBConn creates a new mock instance.
func NewMockIManageDBConn(ctrl *gomock.Controller) *MockIManageDBConn {
	mock := &MockIManageDBConn{ctrl: ctrl}
	mock.recorder = &MockIManageDBConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManageDBConn) EXPECT() *MockIManageDBConnMockRecorder {
	return m.recorder
}

// GetConnection mocks base method.
func (m *MockIManageDBConn) GetConnection(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockIManageDBConnMockRecorder) GetConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockIManageDBConn)(nil).GetConnection), ctx)
}

// StartTransaction mocks base method.
func (m *MockIManageDBConn) StartTransaction(ctx context.Context, fc func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx, fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockIManageDBConnMockRecorder) StartTransaction(ctx, fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockIManageDBConn)(nil).StartTransaction), ctx, fc)
}
